/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.2.0 Fri Jun 25 12:06:47 2021.
 */

#ifndef LUNAR_CAN_MESSAGES_H
#define LUNAR_CAN_MESSAGES_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define LUNAR_CAN_MESSAGES_BB_BATTERY_STATUS_RSP_FRAME_ID (0x1b001u)
#define LUNAR_CAN_MESSAGES_BB_DCDC_STATUS_RSP_FRAME_ID (0x1b002u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE1TO4_RSP_FRAME_ID (0x1b003u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE5TO8_RSP_FRAME_ID (0x1b004u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE9TO12_RSP_FRAME_ID (0x1b005u)
#define LUNAR_CAN_MESSAGES_BB_CELL_TEMP_RSP_FRAME_ID (0x1b006u)
#define LUNAR_CAN_MESSAGES_BB_DCDC_TEMPERATURES_RSP_FRAME_ID (0x1b007u)
#define LUNAR_CAN_MESSAGES_INV_L2_N_STATUS_RSP_FRAME_ID (0x1a001u)
#define LUNAR_CAN_MESSAGES_INV_L2_L_STATUS_RSP_FRAME_ID (0x1a002u)
#define LUNAR_CAN_MESSAGES_INV_DC_BUS_STATUS_RSP_FRAME_ID (0x1a003u)
#define LUNAR_CAN_MESSAGES_INV_TEMPERATURES_RSP_FRAME_ID (0x1a004u)
#define LUNAR_CAN_MESSAGES_INV_STATE_RSP_FRAME_ID (0x1a005u)
#define LUNAR_CAN_MESSAGES_BB_COMMAND_CMD_FRAME_ID (0xb101u)
#define LUNAR_CAN_MESSAGES_INV_COMMAND_CMD_FRAME_ID (0xa101u)

/* Frame lengths in bytes. */
#define LUNAR_CAN_MESSAGES_BB_BATTERY_STATUS_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_BB_DCDC_STATUS_RSP_LENGTH (4u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE1TO4_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE5TO8_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE9TO12_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_BB_CELL_TEMP_RSP_LENGTH (6u)
#define LUNAR_CAN_MESSAGES_BB_DCDC_TEMPERATURES_RSP_LENGTH (4u)
#define LUNAR_CAN_MESSAGES_INV_L2_N_STATUS_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_INV_L2_L_STATUS_RSP_LENGTH (4u)
#define LUNAR_CAN_MESSAGES_INV_DC_BUS_STATUS_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_INV_TEMPERATURES_RSP_LENGTH (8u)
#define LUNAR_CAN_MESSAGES_INV_STATE_RSP_LENGTH (3u)
#define LUNAR_CAN_MESSAGES_BB_COMMAND_CMD_LENGTH (2u)
#define LUNAR_CAN_MESSAGES_INV_COMMAND_CMD_LENGTH (4u)

/* Extended or standard frame types. */
#define LUNAR_CAN_MESSAGES_BB_BATTERY_STATUS_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_DCDC_STATUS_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE1TO4_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE5TO8_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE9TO12_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_CELL_TEMP_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_DCDC_TEMPERATURES_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_INV_L2_N_STATUS_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_INV_L2_L_STATUS_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_INV_DC_BUS_STATUS_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_INV_TEMPERATURES_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_INV_STATE_RSP_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_BB_COMMAND_CMD_IS_EXTENDED (1)
#define LUNAR_CAN_MESSAGES_INV_COMMAND_CMD_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define LUNAR_CAN_MESSAGES_BB_BATTERY_STATUS_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_DCDC_STATUS_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE1TO4_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE5TO8_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_CELL_VOLTAGE9TO12_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_CELL_TEMP_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_DCDC_TEMPERATURES_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_INV_L2_N_STATUS_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_INV_L2_L_STATUS_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_INV_DC_BUS_STATUS_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_INV_TEMPERATURES_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_INV_STATE_RSP_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_BB_COMMAND_CMD_CYCLE_TIME_MS (0u)
#define LUNAR_CAN_MESSAGES_INV_COMMAND_CMD_CYCLE_TIME_MS (0u)

/* Signal choices. */


/**
 * Signals in message BB_BatteryStatusRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_battery_status_rsp_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t battery_block_state;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t battery_voltage_v;

    /**
     * Range: -32768..32767 (-163.84..163.835 -)
     * Scale: 0.005
     * Offset: 0
     */
    int16_t battery_current_a;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_soc;
};

/**
 * Signals in message BB_DCDCStatusRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_dcdc_status_rsp_t {
    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t dc_bus_voltage_v;

    /**
     * Range: -32768..32767 (-163.84..163.835 -)
     * Scale: 0.005
     * Offset: 0
     */
    int16_t dc_bus_current_a;
};

/**
 * Signals in message BB_CellVoltage1to4RSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_t {
    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell1_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell2_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell3_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell4_v;
};

/**
 * Signals in message BB_CellVoltage5to8RSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_t {
    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell5_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell6_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell7_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell8_v;
};

/**
 * Signals in message BB_CellVoltage9to12RSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_t {
    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell9_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell10_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell11_v;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t cell12_v;
};

/**
 * Signals in message BB_CellTempRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_cell_temp_rsp_t {
    /**
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t submodule1_c;

    /**
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t submodule2_c;

    /**
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t submodule3_c;

    /**
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t submodule4_c;

    /**
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t submodule5_c;

    /**
     * Range: 0..255 (-40..87.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t submodule6_c;
};

/**
 * Signals in message BB_DCDCTemperaturesRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_t {
    /**
     * Range: 0..255 (-60..195 -)
     * Scale: 1
     * Offset: -60
     */
    uint16_t bb_heatsink_c;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fan_duty_cycle;
};

/**
 * Signals in message INV_L2NStatusRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_inv_l2_n_status_rsp_t {
    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t l1_n_voltage_vrms;

    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t l2_n_voltage_vrms;

    /**
     * Range: 0..65535 (0..327.675 -)
     * Scale: 0.005
     * Offset: 0
     */
    uint16_t l1_n_current_arms;

    /**
     * Range: 0..65535 (0..327.675 -)
     * Scale: 0.005
     * Offset: 0
     */
    uint16_t l2_n_current_arms;
};

/**
 * Signals in message INV_L2LStatusRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_inv_l2_l_status_rsp_t {
    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t l1_l2_voltage_vrms;

    /**
     * Range: 0..65535 (0..327.675 -)
     * Scale: 0.005
     * Offset: 0
     */
    uint16_t l1_l2_current_arms;
};

/**
 * Signals in message INV_DCBusStatusRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_inv_dc_bus_status_rsp_t {
    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pos_bus_voltage;

    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t neg_bus_voltage;

    /**
     * Range: 0..65535 (0..327.675 -)
     * Scale: 0.005
     * Offset: 0
     */
    uint16_t pos_bus_current;

    /**
     * Range: 0..65535 (0..327.675 -)
     * Scale: 0.005
     * Offset: 0
     */
    uint16_t neg_bus_current;
};

/**
 * Signals in message INV_TemperaturesRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_inv_temperatures_rsp_t {
    /**
     * Range: 0..255 (-60..195 -)
     * Scale: 1
     * Offset: -60
     */
    uint8_t inv_heatsink_c;

    /**
     * Range: 0..255 (-60..195 -)
     * Scale: 1
     * Offset: -60
     */
    uint8_t inv_power_stage1_c;

    /**
     * Range: 0..255 (-60..195 -)
     * Scale: 1
     * Offset: -60
     */
    uint8_t inv_power_stage2_c;

    /**
     * Range: 0..255 (-60..195 -)
     * Scale: 1
     * Offset: -60
     */
    uint8_t inv_power_stage3_c;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t inv_fan_duty_cycle1;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t inv_fan_duty_cycle2;
};

/**
 * Signals in message INV_StateRSP.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_inv_state_rsp_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_ac_relay;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_l1_l2_in_phase;
};

/**
 * Signals in message BB_CommandCMD.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_bb_command_cmd_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bb_state_req;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bb_reset_req;
};

/**
 * Signals in message INV_CommandCMD.
 *
 * All signal values are as on the CAN bus.
 */
struct Lunar_CAN_Messages_inv_command_cmd_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_state_req;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_reset_req;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_rapid_shutdown;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inv_l1_l2_in_phase_req;
};

/**
 * Pack message BB_BatteryStatusRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_battery_status_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_battery_status_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_BatteryStatusRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_battery_status_rsp_unpack(
    struct Lunar_CAN_Messages_bb_battery_status_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_battery_status_rsp_battery_block_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_battery_status_rsp_battery_block_state_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_battery_status_rsp_battery_block_state_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_battery_status_rsp_battery_voltage_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_battery_status_rsp_battery_voltage_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_battery_status_rsp_battery_voltage_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t Lunar_CAN_Messages_bb_battery_status_rsp_battery_current_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_battery_status_rsp_battery_current_a_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_battery_status_rsp_battery_current_a_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_battery_status_rsp_battery_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_battery_status_rsp_battery_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_battery_status_rsp_battery_soc_is_in_range(uint16_t value);

/**
 * Pack message BB_DCDCStatusRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_dcdc_status_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_dcdc_status_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_DCDCStatusRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_dcdc_status_rsp_unpack(
    struct Lunar_CAN_Messages_bb_dcdc_status_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_dcdc_status_rsp_dc_bus_voltage_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_dcdc_status_rsp_dc_bus_voltage_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_dcdc_status_rsp_dc_bus_voltage_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t Lunar_CAN_Messages_bb_dcdc_status_rsp_dc_bus_current_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_dcdc_status_rsp_dc_bus_current_a_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_dcdc_status_rsp_dc_bus_current_a_is_in_range(int16_t value);

/**
 * Pack message BB_CellVoltage1to4RSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_CellVoltage1to4RSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_unpack(
    struct Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell1_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell1_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell1_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell2_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell2_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell2_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell3_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell3_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell3_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell4_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell4_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage1to4_rsp_cell4_v_is_in_range(uint16_t value);

/**
 * Pack message BB_CellVoltage5to8RSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_CellVoltage5to8RSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_unpack(
    struct Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell5_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell5_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell5_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell6_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell6_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell6_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell7_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell7_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell7_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell8_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell8_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage5to8_rsp_cell8_v_is_in_range(uint16_t value);

/**
 * Pack message BB_CellVoltage9to12RSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_CellVoltage9to12RSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_unpack(
    struct Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell9_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell9_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell9_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell10_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell10_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell10_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell11_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell11_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell11_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell12_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell12_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_voltage9to12_rsp_cell12_v_is_in_range(uint16_t value);

/**
 * Pack message BB_CellTempRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_temp_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_cell_temp_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_CellTempRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_cell_temp_rsp_unpack(
    struct Lunar_CAN_Messages_bb_cell_temp_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_cell_temp_rsp_submodule1_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_temp_rsp_submodule1_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_temp_rsp_submodule1_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_cell_temp_rsp_submodule2_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_temp_rsp_submodule2_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_temp_rsp_submodule2_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_cell_temp_rsp_submodule3_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_temp_rsp_submodule3_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_temp_rsp_submodule3_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_cell_temp_rsp_submodule4_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_temp_rsp_submodule4_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_temp_rsp_submodule4_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_cell_temp_rsp_submodule5_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_temp_rsp_submodule5_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_temp_rsp_submodule5_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_cell_temp_rsp_submodule6_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_cell_temp_rsp_submodule6_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_cell_temp_rsp_submodule6_c_is_in_range(uint8_t value);

/**
 * Pack message BB_DCDCTemperaturesRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_t *src_p,
    size_t size);

/**
 * Unpack message BB_DCDCTemperaturesRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_unpack(
    struct Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_bb_heatsink_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_bb_heatsink_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_bb_heatsink_c_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_fan_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_fan_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_dcdc_temperatures_rsp_fan_duty_cycle_is_in_range(uint16_t value);

/**
 * Pack message INV_L2NStatusRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_inv_l2_n_status_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_inv_l2_n_status_rsp_t *src_p,
    size_t size);

/**
 * Unpack message INV_L2NStatusRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_inv_l2_n_status_rsp_unpack(
    struct Lunar_CAN_Messages_inv_l2_n_status_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_l2_n_status_rsp_l1_n_voltage_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_l2_n_status_rsp_l1_n_voltage_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_l2_n_status_rsp_l1_n_voltage_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_l2_n_status_rsp_l2_n_voltage_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_l2_n_status_rsp_l2_n_voltage_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_l2_n_status_rsp_l2_n_voltage_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_l2_n_status_rsp_l1_n_current_arms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_l2_n_status_rsp_l1_n_current_arms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_l2_n_status_rsp_l1_n_current_arms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_l2_n_status_rsp_l2_n_current_arms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_l2_n_status_rsp_l2_n_current_arms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_l2_n_status_rsp_l2_n_current_arms_is_in_range(uint16_t value);

/**
 * Pack message INV_L2LStatusRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_inv_l2_l_status_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_inv_l2_l_status_rsp_t *src_p,
    size_t size);

/**
 * Unpack message INV_L2LStatusRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_inv_l2_l_status_rsp_unpack(
    struct Lunar_CAN_Messages_inv_l2_l_status_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_l2_l_status_rsp_l1_l2_voltage_vrms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_l2_l_status_rsp_l1_l2_voltage_vrms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_l2_l_status_rsp_l1_l2_voltage_vrms_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_l2_l_status_rsp_l1_l2_current_arms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_l2_l_status_rsp_l1_l2_current_arms_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_l2_l_status_rsp_l1_l2_current_arms_is_in_range(uint16_t value);

/**
 * Pack message INV_DCBusStatusRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_inv_dc_bus_status_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_inv_dc_bus_status_rsp_t *src_p,
    size_t size);

/**
 * Unpack message INV_DCBusStatusRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_inv_dc_bus_status_rsp_unpack(
    struct Lunar_CAN_Messages_inv_dc_bus_status_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_dc_bus_status_rsp_pos_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_dc_bus_status_rsp_pos_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_dc_bus_status_rsp_pos_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_dc_bus_status_rsp_neg_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_dc_bus_status_rsp_neg_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_dc_bus_status_rsp_neg_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_dc_bus_status_rsp_pos_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_dc_bus_status_rsp_pos_bus_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_dc_bus_status_rsp_pos_bus_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_dc_bus_status_rsp_neg_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_dc_bus_status_rsp_neg_bus_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_dc_bus_status_rsp_neg_bus_current_is_in_range(uint16_t value);

/**
 * Pack message INV_TemperaturesRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_inv_temperatures_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_inv_temperatures_rsp_t *src_p,
    size_t size);

/**
 * Unpack message INV_TemperaturesRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_inv_temperatures_rsp_unpack(
    struct Lunar_CAN_Messages_inv_temperatures_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_temperatures_rsp_inv_heatsink_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_temperatures_rsp_inv_heatsink_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_temperatures_rsp_inv_heatsink_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage1_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage1_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage1_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage2_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage2_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage2_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage3_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage3_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_temperatures_rsp_inv_power_stage3_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_temperatures_rsp_inv_fan_duty_cycle1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_temperatures_rsp_inv_fan_duty_cycle1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_temperatures_rsp_inv_fan_duty_cycle1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t Lunar_CAN_Messages_inv_temperatures_rsp_inv_fan_duty_cycle2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_temperatures_rsp_inv_fan_duty_cycle2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_temperatures_rsp_inv_fan_duty_cycle2_is_in_range(uint16_t value);

/**
 * Pack message INV_StateRSP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_inv_state_rsp_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_inv_state_rsp_t *src_p,
    size_t size);

/**
 * Unpack message INV_StateRSP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_inv_state_rsp_unpack(
    struct Lunar_CAN_Messages_inv_state_rsp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_state_rsp_inv_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_state_rsp_inv_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_state_rsp_inv_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_state_rsp_inv_ac_relay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_state_rsp_inv_ac_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_state_rsp_inv_ac_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_state_rsp_inv_l1_l2_in_phase_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_state_rsp_inv_l1_l2_in_phase_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_state_rsp_inv_l1_l2_in_phase_is_in_range(uint8_t value);

/**
 * Pack message BB_CommandCMD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_bb_command_cmd_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_bb_command_cmd_t *src_p,
    size_t size);

/**
 * Unpack message BB_CommandCMD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_bb_command_cmd_unpack(
    struct Lunar_CAN_Messages_bb_command_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_command_cmd_bb_state_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_command_cmd_bb_state_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_command_cmd_bb_state_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_bb_command_cmd_bb_reset_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_bb_command_cmd_bb_reset_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_bb_command_cmd_bb_reset_req_is_in_range(uint8_t value);

/**
 * Pack message INV_CommandCMD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Lunar_CAN_Messages_inv_command_cmd_pack(
    uint8_t *dst_p,
    const struct Lunar_CAN_Messages_inv_command_cmd_t *src_p,
    size_t size);

/**
 * Unpack message INV_CommandCMD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Lunar_CAN_Messages_inv_command_cmd_unpack(
    struct Lunar_CAN_Messages_inv_command_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_command_cmd_inv_state_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_command_cmd_inv_state_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_command_cmd_inv_state_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_command_cmd_inv_reset_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_command_cmd_inv_reset_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_command_cmd_inv_reset_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_command_cmd_inv_rapid_shutdown_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_command_cmd_inv_rapid_shutdown_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_command_cmd_inv_rapid_shutdown_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t Lunar_CAN_Messages_inv_command_cmd_inv_l1_l2_in_phase_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double Lunar_CAN_Messages_inv_command_cmd_inv_l1_l2_in_phase_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Lunar_CAN_Messages_inv_command_cmd_inv_l1_l2_in_phase_req_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
